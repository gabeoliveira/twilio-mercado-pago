# scripts/deploy-functions.sh
#!/bin/bash
set -euo pipefail

# Load canonical local env (developer overrides)
SERVICE_ENV="mercado-pago-serverless/.env.local"
if [[ -f "$SERVICE_ENV" ]]; then
	# shellcheck disable=SC2046
	export $(grep -v '^#' "$SERVICE_ENV" | xargs)
fi

# Load template SIDs generated by deploy-templates.sh (if present)
TEMPLATE_ENV=".env-temp/templates.env"
if [[ -f "$TEMPLATE_ENV" ]]; then
	# shellcheck disable=SC2046
	export $(grep -v '^#' "$TEMPLATE_ENV" | xargs)
fi

# Resolve Twilio CLI creds (support either TWILIO_* or app vars)
ACCOUNT_SID="${ACCOUNT_SID:-${TWILIO_ACCOUNT_SID:-}}"
AUTH_TOKEN="${AUTH_TOKEN:-${TWILIO_AUTH_TOKEN:-}}"
export TWILIO_ACCOUNT_SID="$ACCOUNT_SID"
export TWILIO_AUTH_TOKEN="$AUTH_TOKEN"

# Helper: is this a real Content SID (not a placeholder)?
is_real_sid() {
	[[ "$1" =~ ^HX[0-9A-Za-z]{32}$ ]]
}

# Prefer fresh SIDs from templates.env, but allow .env.local iff they look real
# Start with what we got from templates.env (may be empty)
PAYMENT_SID="${PAYMENT_CONTENT_SID:-}"
CARD_SID="${CREDIT_CARD_CONTENT_SID:-}"
STATUS_SID="${ORDER_STATUS_CONTENT_SID:-}"

# Candidate overrides from .env.local
PAYMENT_SID_LOCAL="$(grep -E '^PAYMENT_CONTENT_SID=' "$SERVICE_ENV" 2>/dev/null | cut -d= -f2- || true)"
CARD_SID_LOCAL="$(grep -E '^CREDIT_CARD_CONTENT_SID=' "$SERVICE_ENV" 2>/dev/null | cut -d= -f2- || true)"
STATUS_SID_LOCAL="$(grep -E '^ORDER_STATUS_CONTENT_SID=' "$SERVICE_ENV" 2>/dev/null | cut -d= -f2- || true)"

# Apply overrides only if they look like real SIDs
if [[ -n "$PAYMENT_SID_LOCAL" ]] && is_real_sid "$PAYMENT_SID_LOCAL"; then
	PAYMENT_SID="$PAYMENT_SID_LOCAL"
fi
if [[ -n "$CARD_SID_LOCAL" ]] && is_real_sid "$CARD_SID_LOCAL"; then
	CARD_SID="$CARD_SID_LOCAL"
fi
if [[ -n "$STATUS_SID_LOCAL" ]] && is_real_sid "$STATUS_SID_LOCAL"; then
	STATUS_SID="$STATUS_SID_LOCAL"
fi

# Validate required runtime secrets
missing=()
[[ -z "${ACCOUNT_SID:-}" ]] && missing+=("ACCOUNT_SID (or TWILIO_ACCOUNT_SID)")
[[ -z "${AUTH_TOKEN:-}" ]] && missing+=("AUTH_TOKEN (or TWILIO_AUTH_TOKEN)")
[[ -z "${MERCADO_PAGO_ACCESS_TOKEN:-}" ]] && missing+=("MERCADO_PAGO_ACCESS_TOKEN")
[[ -z "${WHATSAPP_FROM_NUMBER:-}" ]] && missing+=("WHATSAPP_FROM_NUMBER")

# Ensure we have real SIDs (don’t accept placeholders)
(! is_real_sid "${PAYMENT_SID:-}") && missing+=("PAYMENT_CONTENT_SID")
(! is_real_sid "${CARD_SID:-}") && missing+=("CREDIT_CARD_CONTENT_SID")
(! is_real_sid "${STATUS_SID:-}") && missing+=("ORDER_STATUS_CONTENT_SID")

if (( ${#missing[@]} )); then
	echo "❌ Missing variables:"
	for m in "${missing[@]}"; do echo "  - $m"; done
	echo
	echo "Fix options:"
	echo "  • Run scripts/deploy-templates.sh (recommended, generates real SIDs)"
	echo "  • Or set real SIDs in mercado-pago-serverless/.env.local (not placeholders)"
	exit 1
fi

cd mercado-pago-serverless

# Build final .env for deployment (never commit this file)
ENV_FILE=".env"
: > "$ENV_FILE"

cat <<EOF >> "$ENV_FILE"
ACCOUNT_SID=$ACCOUNT_SID
AUTH_TOKEN=$AUTH_TOKEN
MERCADO_PAGO_ACCESS_TOKEN=$MERCADO_PAGO_ACCESS_TOKEN
WHATSAPP_FROM_NUMBER=$WHATSAPP_FROM_NUMBER
PAYMENT_CONTENT_SID=$PAYMENT_SID
CREDIT_CARD_CONTENT_SID=$CARD_SID
ORDER_STATUS_CONTENT_SID=$STATUS_SID
EOF

echo "🧪 Built .env:"
cat "$ENV_FILE"

twilio serverless:deploy \
	--env .env \
	--service-name mercado-pago-serverless \
	--force

echo "✅ Functions deployed successfully"