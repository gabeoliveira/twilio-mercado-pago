# .github/workflows/deploy-templates.yml
name: Deploy Content Templates

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Deploy Content Templates"]
    types: [completed]
  push:
    paths:
      - "content-templates/**"

jobs:
  deploy-templates:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    concurrency:
      group: deploy-templates-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Create & Approve Content (REST)
        env:
          # Prefer a Twilio Subaccount API Key/Secret if possible:
          # TW_ACC_KEY: ${{ secrets.TWILIO_API_KEY_SID }}
          # TW_ACC_SECRET: ${{ secrets.TWILIO_API_KEY_SECRET }}
          # If you stay with Account SID/Auth Token, that's OK:
          TW_ACC: ${{ secrets.ACCOUNT_SID }}
          TW_AUTH: ${{ secrets.AUTH_TOKEN }}
        run: |
          set -euo pipefail
          mkdir -p .env-temp
          ENV_FILE=".env-temp/templates.env"
          : > "$ENV_FILE"

          create_content() {
            local file="$1"
            curl -sS -u "${TW_ACC}:${TW_AUTH}" \
              -H 'Content-Type: application/json' \
              -H 'Accept: application/json' \
              --data-binary @"$file" \
              https://content.twilio.com/v1/Content
          }

          approve_whatsapp() {
            local sid="$1" name="$2"
            curl -sS -u "${TW_ACC}:${TW_AUTH}" \
              -H 'Content-Type: application/json' \
              -H 'Accept: application/json' \
              -X POST "https://content.twilio.com/v1/Content/${sid}/ApprovalRequests/whatsapp" \
              -d "{\"name\":\"${name}\",\"category\":\"UTILITY\"}"
          }

          for file in content-templates/*.json; do
            NAME=$(basename "$file" .json)
            SLUG=$(echo "$NAME" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/_/g; s/^_+|_+$//g')

            # Create
            CREATE_RESP=$(create_content "$file")
            SID=$(echo "$CREATE_RESP" | jq -r '.sid // empty')
            if [ -z "$SID" ]; then
              echo "❌ Failed to create Content for $NAME"
              echo "$CREATE_RESP" | jq -C .
              exit 1
            fi

            # Approve
            SID_LC=$(echo "$SID" | tr '[:upper:]' '[:lower:]')
            APPROVAL_NAME="${SID_LC}_${SLUG}"
            APPROVE_RESP=$(approve_whatsapp "$SID" "$APPROVAL_NAME")

            # Minimal logging (no bodies)
            echo "Created content: name=$NAME sid=$SID approval_name=$APPROVAL_NAME"

            # Map to env vars for the Functions deploy
            NAME_UPPER=$(echo "$NAME" | tr '[:lower:]' '[:upper:]')
            if [ "$NAME_UPPER" = "PIX" ]; then
              echo "PAYMENT_CONTENT_SID=$SID" >> "$ENV_FILE"
            elif [ "$NAME_UPPER" = "CARD" ]; then
              echo "CREDIT_CARD_CONTENT_SID=$SID" >> "$ENV_FILE"
            elif [ "$NAME_UPPER" = "STATUS" ]; then
              echo "ORDER_STATUS_CONTENT_SID=$SID" >> "$ENV_FILE"
            fi
          done

      - name: Upload template SIDs artifact
        uses: actions/upload-artifact@v4
        with:
          name: templates-env
          path: .env-temp/templates.env
          if-no-files-found: error
          retention-days: 3
