name: Deploy Twilio Serverless

on:
  push:
    branches: [main]
    paths:
      - "mercado-pago-serverless/**"
      - ".github/workflows/deploy-functions.yml" # optional: rerun when the workflow changes
  workflow_dispatch:
  workflow_run:
    workflows: ["Deploy Content Templates"]
    types: [completed]

jobs:
  deploy-functions:
    runs-on: ubuntu-latest
    # principle of least privilege
    permissions:
      contents: read
      actions: read
    concurrency:
      group: deploy-functions-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install jq (and unzip)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: List artifacts for triggering run (debug)
        if: ${{ github.event_name == 'workflow_run' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          echo "Listing artifacts for run ${{ github.event.workflow_run.id }} in ${{ github.repository }}:"
          curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "$GITHUB_API_URL/repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/artifacts" \
          | jq -r '.artifacts[] | "\(.name)  (expired=\(.expired))"'

      - name: Download template env from triggering run
        if: ${{ github.event_name == 'workflow_run' }}
        uses: actions/download-artifact@v4
        with:
          name: templates-env
          run-id: ${{ github.event.workflow_run.id }}
          path: mercado-pago-serverless
          github-token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Download template env (best-effort)
        if: ${{ github.event_name != 'workflow_run' }}
        uses: actions/download-artifact@v4
        with:
          name: templates-env
          path: mercado-pago-serverless
        continue-on-error: true

      - name: Fallback: fetch artifact via REST if missing
        if: ${{ github.event_name == 'workflow_run' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TARGET="mercado-pago-serverless/templates.env"
          if [[ -s "$TARGET" ]]; then
            echo "templates.env already present."
            exit 0
          fi

          RUN_ID="${{ github.event.workflow_run.id }}"
          REPO="${{ github.repository }}"
          echo "Attempting REST fallback for run $RUN_ID…"

          API_URL="$GITHUB_API_URL/repos/$REPO/actions/runs/$RUN_ID/artifacts"
          ART_JSON=$(curl -sS -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" "$API_URL")
          ART_ID=$(echo "$ART_JSON" | jq -r '.artifacts[] | select(.name=="templates-env" and .expired==false) | .id' | head -n1)

          if [[ -z "$ART_ID" || "$ART_ID" == "null" ]]; then
            echo "No non-expired artifact named 'templates-env' found for run $RUN_ID"
            exit 0
          fi

          ZIP_URL="$GITHUB_API_URL/repos/$REPO/actions/artifacts/$ART_ID/zip"
          TMP_ZIP="$(mktemp)"
          curl -sS -L -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" "$ZIP_URL" -o "$TMP_ZIP"

          mkdir -p mercado-pago-serverless
          unzip -o "$TMP_ZIP" -d mercado-pago-serverless
          rm -f "$TMP_ZIP"

          if [[ -s "$TARGET" ]]; then
            echo "templates.env restored via REST fallback."
          else
            echo "REST fallback completed, but templates.env not found in zip."
          fi

      - name: Install Twilio CLI
        run: |
          npm install -g twilio-cli
          twilio plugins:install @twilio-labs/plugin-serverless

      - name: Build .env and Deploy
        working-directory: mercado-pago-serverless
        env:
          # Twilio CLI auth via env (no profile)
          TWILIO_ACCOUNT_SID: ${{ secrets.ACCOUNT_SID }}
          TWILIO_AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}

          # Runtime secrets
          ACCOUNT_SID: ${{ secrets.ACCOUNT_SID }}
          AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}
          MERCADO_PAGO_ACCESS_TOKEN: ${{ secrets.MERCADO_PAGO_ACCESS_TOKEN }}
          WHATSAPP_FROM_NUMBER: ${{ secrets.WHATSAPP_FROM_NUMBER }}
        run: |
          set -euo pipefail

          # ── 0) Config ───────────────────────────────────────────────────────────────
          SVCS=mercado-pago-serverless
          ENV_NAME=dev   # or "production"

          # ── 1) Discover Service SID and Environment SID via Twilio REST CLI ────────
          SERVICE_SID=""
          ENV_SID=""

          # Find the Service SID by friendly name
          SERVICE_SID=$(twilio api:serverless:v1:services:list \
            --limit 50 \
            -o json \
          | jq -r --arg n "$SVCS" 'map(select(.friendly_name==$n)) | .[0].sid // empty')

          if [[ -n "$SERVICE_SID" ]]; then
            # Find the Environment SID by unique_name
            ENV_SID=$(twilio api:serverless:v1:services:environments:list \
              --service-sid "$SERVICE_SID" \
              --limit 50 \
              -o json \
            | jq -r --arg e "$ENV_NAME" 'map(select(.unique_name==$e)) | .[0].sid // empty')
          fi

          # ── 2) Seed .env from existing variables (if service/env exist) ─────────────
          : > .env
          if [[ -n "${SERVICE_SID:-}" && -n "${ENV_SID:-}" ]]; then
            twilio api:serverless:v1:services:environments:variables:list \
              --service-sid "$SERVICE_SID" \
              --environment-sid "$ENV_SID" \
              --limit 200 \
              -o json \
            | jq -r '.[] | "\(.key)=\(.value)"' >> .env || true
          fi

          # ── 3) Layer artifact SIDs if present (won’t error if missing) ─────────────
          cp ./templates.env .env.tmp 2>/dev/null || touch .env.tmp
          # merge: replace or add keys from templates.env into .env
          awk -F= 'FNR==NR{m[$1]=$0;next} {k=$1; if(k in m){print m[k]; delete m[k]} else {print}} END{for(k in m)print m[k]}' .env.tmp .env > .env.merged
          mv .env.merged .env
          rm -f .env.tmp

          # ── 4) Append/override with runtime secrets (authoritative) ────────────────
          append_or_replace () { key="$1"; val="$2"; grep -q "^${key}=" .env && sed -i.bak "s|^${key}=.*|${key}=${val}|" .env || echo "${key}=${val}" >> .env; }
          append_or_replace ACCOUNT_SID "${ACCOUNT_SID}"
          append_or_replace AUTH_TOKEN "${AUTH_TOKEN}"
          append_or_replace MERCADO_PAGO_ACCESS_TOKEN "${MERCADO_PAGO_ACCESS_TOKEN}"
          append_or_replace WHATSAPP_FROM_NUMBER "${WHATSAPP_FROM_NUMBER}"

          # Optional: accept fallback SID secrets only if missing and they look real
          append_if_missing_real () {
            key="$1"; val="${2:-}"
            [[ -z "$val" ]] && return 0
            if ! grep -q "^${key}=" .env; then
              [[ "$val" =~ ^HX[0-9A-Za-z]{32}$ ]] && echo "${key}=${val}" >> .env
            fi
          }
          append_if_missing_real PAYMENT_CONTENT_SID "${PAYMENT_CONTENT_SID_SECRET:-}"
          append_if_missing_real CREDIT_CARD_CONTENT_SID "${CREDIT_CARD_CONTENT_SID_SECRET:-}"
          append_if_missing_real ORDER_STATUS_CONTENT_SID "${ORDER_STATUS_CONTENT_SID_SECRET:-}"

          # ── 5) Sanity check ────────────────────────────────────────────────────────
          if [[ ! -s .env ]]; then
            echo "❌ .env is empty after merge. Aborting."
            exit 1
          fi
          echo "Built .env with $(wc -l < .env) keys (values hidden)"

          # ── 6) Deploy ──────────────────────────────────────────────────────────────
          twilio serverless:deploy \
            --service-name "$SVCS" \
            --environment "$ENV_NAME" \
            --env .env \
            --force

          # ── 7) Cleanup ─────────────────────────────────────────────────────────────
          shred -u .env || rm -f .env
